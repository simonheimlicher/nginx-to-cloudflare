import re
import os
from pathlib import Path
import dotenv

# Load the .env file
dotenv.load_dotenv()


# Domains
ORIGINAL_DOMAIN = os.getenv("ORIGINAL_DOMAIN", "example.com")
ORIGINAL_HOST_MATCH_RE = r"(?:[-a-z]+\.)*" + re.escape(ORIGINAL_DOMAIN)

TARGET_URI_PREFIX = os.getenv("TARGET_URI_PREFIX", "")

#
# Directories
#

ROOT_DIR = Path(__file__).absolute().parent
INPUT_DIR = ROOT_DIR / "input"
VALIDATION_DIR = ROOT_DIR / "validation" / ORIGINAL_DOMAIN

INTERMEDIATE_DIR = ROOT_DIR / "intermediate" / ORIGINAL_DOMAIN
OUTPUT_DIR = ROOT_DIR / "output" / ORIGINAL_DOMAIN

#
# Input files
#

# Path to nginx acccess log file as the source of request URIs
ACCESS_LOG_INPUT_FILE = INPUT_DIR / f"{ORIGINAL_DOMAIN}_access.log"

# Files to be read from Hugo
# Hugo website project directory
HUGO_PROJECT_DIR = Path(os.getenv("HUGO_PROJECT_DIR", os.getcwd())).resolve()
HUGO_OUTPUT_SUB_PATH = os.getenv("HUGO_OUTPUT_SUB_PATH", "public")
HUGO_DATA_SUB_PATH = os.getenv("HUGO_DATA_SUB_PATH", "data")

HUGO_PUBLIC_DIR = HUGO_PROJECT_DIR / HUGO_OUTPUT_SUB_PATH
HUGO_DATA_DIR = HUGO_PROJECT_DIR / HUGO_DATA_SUB_PATH

# Required input: complete list of URIs generated by Hugo
HUGO_GENERATED_URLS_FILE = HUGO_PUBLIC_DIR / "_urls"
# Optional input: list of alias mappings generated by Hugo
HUGO_GENERATED_ALIASES_FILE = HUGO_PUBLIC_DIR / "_aliases"

#
# Generated files
#

# Access log processed into a CSV file
ACCESS_LOG_PROCESSED_FILE = INTERMEDIATE_DIR / "access_log.csv"

GENERATED_FILE_NAME_PREFIX = ""  # f"{ORIGINAL_DOMAIN}_"

OUTPUT_AGGREGATED_URIS_FILE = OUTPUT_DIR / f"{GENERATED_FILE_NAME_PREFIX}uris.csv"

# Redirects generated by rules in `generate-redirects.py`
OUTPUT_REDIRECTS_FROM_RULES_FILE = (
    OUTPUT_DIR / f"{GENERATED_FILE_NAME_PREFIX}redirects_from_log.csv"
)

# Unified list of redirects, comprising both
# - Redirects from rules in `generate-redirects.py`
# - Redirects generated by Hugo based on  "aliases" key in front matter of pages
OUTPUT_UNIFIED_REDIRECTS_FILE = (
    OUTPUT_DIR / f"{GENERATED_FILE_NAME_PREFIX}redirects.csv"
)

# Redirects to URIs that are not generated by Hugo
# These redirects must be changed to point to URIs that Hugo generates
OUTPUT_REDIRECTS_TO_INVALID_FILE = (
    OUTPUT_DIR / f"{GENERATED_FILE_NAME_PREFIX}redirects_invalid.csv"
)

# Redirects to URIs that are actually generated by Hugo
# These redirects must be deleted to avoid shadowing valid URIs from HUGO
OUTPUT_REDIRECTS_TO_EXISTING_FILE = (
    OUTPUT_DIR / f"{GENERATED_FILE_NAME_PREFIX}redirects_unwanted.csv"
)

OUTPUT_HUGO_DATA_REDIRECTS_FILE = OUTPUT_DIR / f"{GENERATED_FILE_NAME_PREFIX}_redirects"

OUTPUT_HUGO_DATA_REDIRECTS_CSV_FILE = (
    OUTPUT_DIR / f"{GENERATED_FILE_NAME_PREFIX}hugo_data_redirects.csv"
)

# File in Hugo's data directory that provides Hugo with the redirects generated based on the historical access log
OUTPUT_HUGO_DATA_REDIRECTS_JSON_FILE = (
    OUTPUT_DIR / f"{GENERATED_FILE_NAME_PREFIX}hugo_data_redirects.json"
)
# The above file needs to be manually moved into the Hugo data dir at the following location
HUGO_DATA_REDIRECTS_JSON_FILE = HUGO_DATA_DIR / "redirects.json"


# Access log column names
REMOTE_ADDR = "Remote address"
REMOTE_USER = "Remote user"
REQUEST_TIMESTAMP = "Request timestamp"
REQUEST_METHOD = "Request method"
REQUEST_URI = "Request URI"
REQUEST_REFERER = "Request Referer"
REQUEST_USER_AGENT = "Request User Agent"
REQUEST_STATUS_CODE = "Response Status"
RESPONSE_BYTES_SENT = "Response Body Bytes Sent"

# Generated column names
REQUEST_URI_WITHOUT_QUERY = "URI without query"
REQUEST_URI_CANONICAL = "Canonical URI"
ACCESS_COUNT = "Total Access Count"

# Generated redirects
REDIRECT_URI = "Redirect URI"
REDIRECT_STATUS = "Redirect status"

# Output columns
OUTPUT_REQUEST_URI = "path"
OUTPUT_REDIRECT_URI = "target"
OUTPUT_REDIRECT_STATUS = "status"

COLUMNS_ACCESS_LOG = [
    REMOTE_ADDR,
    REMOTE_USER,
    REQUEST_TIMESTAMP,
    REQUEST_METHOD,
    REQUEST_URI,
    REQUEST_STATUS_CODE,
    RESPONSE_BYTES_SENT,
    REQUEST_REFERER,
    REQUEST_USER_AGENT,
]

COLUMNS_FOR_ANALYSIS = [
    REQUEST_URI,
    REQUEST_TIMESTAMP,
    REQUEST_METHOD,
    REQUEST_STATUS_CODE,
    REQUEST_REFERER,
    REQUEST_USER_AGENT,
]

COLUMNS_PROCESSING = COLUMNS_FOR_ANALYSIS + [
    REQUEST_URI_CANONICAL,
    ACCESS_COUNT,
]

COLUMNS_REDIRECTS = [
    REDIRECT_URI,
    REDIRECT_STATUS,
]

COLUMNS_COMPLETE = COLUMNS_PROCESSING + COLUMNS_REDIRECTS

COLUMNS_OUTPUT = [OUTPUT_REQUEST_URI, OUTPUT_REDIRECT_URI, OUTPUT_REDIRECT_STATUS]

# Validate redirects
VALIDATION_STATUS_INITIAL = "Validation status initial"
VALIDATION_STATUS_FINAL = "Validation status final"

HTTP_STATUS_OK = 200
HTTP_STATUS_REDIRECT = 301
HTTP_STATUS_NOT_FOUND = 404
